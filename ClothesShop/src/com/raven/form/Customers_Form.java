/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.raven.form;

import com.raven.DAO.KhachHangDAO;
import com.raven.DAO.NhanVienDAO;
import com.raven.DAO.RoleDAO;
import com.raven.cell.CellAction;
import com.raven.dialog.Message;
//import static com.raven.form.Customer_Form.fr;
import com.raven.main.Main;
import com.raven.model.KhachHang;
import com.raven.model.ModelStaff;
import com.raven.model.NhanVien;
import com.raven.swing.scrollbar.ScrollBarCustom;
import com.raven.utils.XDialog;
import java.awt.Frame;
import java.util.Date;
import java.util.List;
import javaswingdev.Notification;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AD MIN
 */
public class Customers_Form extends javax.swing.JPanel {

    KhachHangDAO dao = new KhachHangDAO();
    RoleDAO roleDao = new RoleDAO();
    List<KhachHang> list = dao.select();
    static Frame fr;

    public Customers_Form() {
        initComponents();
        initData();
        scroll.setBorder(null);
        scroll.setViewportBorder(null);
        scroll.getViewport().setOpaque(false);
        scroll.setVerticalScrollBar(new ScrollBarCustom());
//        table1.addTableCell(new CellAction(), 5);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roundPanel2 = new com.raven.swing.RoundPanel();
        txtFullname = new textfield.TextField();
        txtID = new textfield.TextField();
        txtEmail = new textfield.TextField();
        btnReform = new button.Button();
        txtName3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtName4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtName6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtName10 = new javax.swing.JLabel();
        txtPhone = new textfield.TextField();
        btnAdd = new button.Button();
        roundPanel1 = new com.raven.swing.RoundPanel();
        scroll = new javax.swing.JScrollPane();
        tblNhanVien = new com.raven.swing.table.Table();
        roundPanel3 = new com.raven.swing.RoundPanel();

        roundPanel2.setBackground(new java.awt.Color(255, 255, 255));

        txtFullname.setLabelText("");

        txtID.setLabelText("");
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        txtEmail.setLabelText("");

        btnReform.setBackground(new java.awt.Color(219, 200, 172));
        btnReform.setForeground(new java.awt.Color(255, 255, 255));
        btnReform.setText("REFORM");
        btnReform.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnReform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReformActionPerformed(evt);
            }
        });

        txtName3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtName3.setForeground(new java.awt.Color(102, 102, 102));
        txtName3.setText("ID");

        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("*");

        txtName4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtName4.setForeground(new java.awt.Color(102, 102, 102));
        txtName4.setText("Full Name");

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("*");

        txtName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtName.setForeground(new java.awt.Color(102, 102, 102));
        txtName.setText("Email");

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("*");

        txtName6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtName6.setForeground(new java.awt.Color(102, 102, 102));
        txtName6.setText("Phone");

        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("*");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 52, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 52, Short.MAX_VALUE)
        );

        txtName10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        txtName10.setText("CUSTOMER");

        txtPhone.setLabelText("");

        btnAdd.setText("ADD");
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundPanel2Layout = new javax.swing.GroupLayout(roundPanel2);
        roundPanel2.setLayout(roundPanel2Layout);
        roundPanel2Layout.setHorizontalGroup(
            roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel2Layout.createSequentialGroup()
                        .addComponent(txtName10, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(roundPanel2Layout.createSequentialGroup()
                        .addGroup(roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roundPanel2Layout.createSequentialGroup()
                                .addComponent(txtName4)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel2))
                            .addGroup(roundPanel2Layout.createSequentialGroup()
                                .addComponent(txtName3)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel6))
                            .addGroup(roundPanel2Layout.createSequentialGroup()
                                .addComponent(txtName)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel4))
                            .addGroup(roundPanel2Layout.createSequentialGroup()
                                .addComponent(txtName6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel5)))
                        .addGap(23, 23, 23)
                        .addGroup(roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtFullname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPhone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(roundPanel2Layout.createSequentialGroup()
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120)
                .addComponent(btnReform, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        roundPanel2Layout.setVerticalGroup(
            roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtName10, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtName3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addGap(18, 18, 18)
                .addGroup(roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName)
                    .addComponent(jLabel4)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName6)
                    .addComponent(jLabel5))
                .addGap(39, 39, 39)
                .addGroup(roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        roundPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tblNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Phone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienMouseClicked(evt);
            }
        });
        scroll.setViewportView(tblNhanVien);

        javax.swing.GroupLayout roundPanel1Layout = new javax.swing.GroupLayout(roundPanel1);
        roundPanel1.setLayout(roundPanel1Layout);
        roundPanel1Layout.setHorizontalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
                .addContainerGap())
        );
        roundPanel1Layout.setVerticalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108))
        );

        roundPanel3.setBackground(new java.awt.Color(102, 255, 204));

        javax.swing.GroupLayout roundPanel3Layout = new javax.swing.GroupLayout(roundPanel3);
        roundPanel3.setLayout(roundPanel3Layout);
        roundPanel3Layout.setHorizontalGroup(
            roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        roundPanel3Layout.setVerticalGroup(
            roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(roundPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roundPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(roundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(roundPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roundPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private void btnReformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReformActionPerformed
        // TODO add your handling code here:
        reform();
    }//GEN-LAST:event_btnReformActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //        // TODO add your handling code here:
        //        if (btnAdd.getText().equals("ADD")) {
        //            if (txtPassword.getText().trim().equals("")) {
        //                if (ValidateInsert(0)) {
        //                    NhanVien model = new NhanVien();
        //                    model.setMaNV(txtID.getText().trim());
        //                    model.setHoten(txtFullname.getText().trim());
        //                    model.setEmail(txtEmail.getText().trim());
        ////                    model.setNgaySinh(txtBirthday.getText().trim());
        //                    model.setSdt(txtPhone.getText().trim());
        ////                    model.setGioiTinh(lblRender.getText().equals("Male"));
        //                    dao.insertNV(model);
        //                    list = dao.select();
        //                    DefaultTableModel modelTable = (DefaultTableModel) tblNhanVien.getModel();
        //                    modelTable.setRowCount(0);
        //                    tblNhanVien.revalidate();
        //                    initTableData();
        //                    notification(fr, "Insert success !", true);
        //                }
        //            } else {
        //                if (ValidateInsert(0)) {
        //                    NhanVien model = new NhanVien();
        //                    model.setMaNV(txtID.getText().trim());
        //                    model.setHoten(txtFullname.getText().trim());
        //                    model.setEmail(txtEmail.getText().trim());
        ////                    model.setNgaySinh(txtBirthday.getText().trim());
        //                    model.setSdt(txtPhone.getText().trim());
        ////                    model.setGioiTinh(lblRender.getText().equals("Male"));
        ////                    model.setVaiTro(lblRole.getText().equals("Admin"));
        ////                    model.setMatKhau(txtPassword.getText());
        //                    dao.insert(model);
        //                    list = dao.select();
        //                    DefaultTableModel modelTable = (DefaultTableModel) tblNhanVien.getModel();
        //                    modelTable.setRowCount(0);
        //                    tblNhanVien.revalidate();
        //                    initTableData();
        //                    notification(fr, "Insert success !", true);
        //                }
        //            }
        //        } else {
        //            if (ValidateUpdate()) {
        //                if (txtPassword.getText().trim().equals("")) {
        //                    if (roleDao.selectByKeyword(txtID.getText()) != null) {
        //                        roleDao.delete(txtID.getText());
        //                        NhanVien model = new NhanVien();
        //                        model.setMaNV(txtID.getText().trim());
        //                        model.setHoten(txtFullname.getText().trim());
        //                        model.setEmail(txtEmail.getText().trim());
        ////                        model.setNgaySinh(txtBirthday.getText().trim());
        //                        model.setSdt(txtPhone.getText().trim());
        ////                        model.setGioiTinh(lblRender.getText().equals("Male"));
        //                        dao.updateNV(model);
        //                    } else {
        //                        NhanVien model = new NhanVien();
        //                        model.setMaNV(txtID.getText().trim());
        //                        model.setHoten(txtFullname.getText().trim());
        //                        model.setEmail(txtEmail.getText().trim());
        ////                        model.setNgaySinh(txtBirthday.getText().trim());
        //                        model.setSdt(txtPhone.getText().trim());
        ////                        model.setGioiTinh(lblRender.getText().equals("Male"));
        //                        dao.updateNV(model);
        //                    }
        //                } else {
        //                    if (roleDao.selectByKeyword(txtID.getText()) != null) {
        //                        Role role = new Role();
        //                        role.setMaNV(txtID.getText());
        ////                        role.setMatKhau(txtPassword.getText());
        ////                        role.setVaiTro(lblRender.getText().equals("Admin"));
        //                        roleDao.insert(role);
        //                        NhanVien model = new NhanVien();
        //                        model.setMaNV(txtID.getText().trim());
        //                        model.setHoten(txtFullname.getText().trim());
        //                        model.setEmail(txtEmail.getText().trim());
        ////                        model.setNgaySinh(txtBirthday.getText().trim());
        //                        model.setSdt(txtPhone.getText().trim());
        ////                        model.setGioiTinh(lblRender.getText().equals("Male"));
        //                        dao.updateNV(model);
        //                    } else {
        //                        NhanVien model = new NhanVien();
        //                        model.setMaNV(txtID.getText().trim());
        //                        model.setHoten(txtFullname.getText().trim());
        //                        model.setEmail(txtEmail.getText().trim());
        ////                        model.setNgaySinh(txtBirthday.getText().trim());
        //                        model.setSdt(txtPhone.getText().trim());
        ////                        model.setGioiTinh(lblRender.getText().equals("Male"));
        ////                        model.setVaiTro(lblRole.getText().equals("Admin"));
        ////                        model.setMatKhau(txtPassword.getText());
        //                        dao.update(model);
        //                    }
        //                }
        //                list = dao.select();
        //                DefaultTableModel modelTable = (DefaultTableModel) tblNhanVien.getModel();
        //                modelTable.setRowCount(0);
        //                tblNhanVien.revalidate();
        //                initTableData();
        //                notification(fr, "Update success !", true);
        //            }
        //        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            KhachHang kh = list.get(tblNhanVien.rowAtPoint(evt.getPoint()));
//            txtID.setText(kh.getMaKH());
            txtFullname.setText(kh.getTen());
            txtEmail.setText(kh.getEmail());
            txtPhone.setText(kh.getSdt());
            txtID.setEditable(false);
            btnAdd.setText("UPDATE");
//            btnDelete.setEnabled(true);
        }
    }//GEN-LAST:event_tblNhanVienMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private button.Button btnAdd;
    private button.Button btnReform;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private com.raven.swing.RoundPanel roundPanel1;
    private com.raven.swing.RoundPanel roundPanel2;
    private com.raven.swing.RoundPanel roundPanel3;
    private javax.swing.JScrollPane scroll;
    private com.raven.swing.table.Table tblNhanVien;
    private textfield.TextField txtEmail;
    private textfield.TextField txtFullname;
    private textfield.TextField txtID;
    private javax.swing.JLabel txtName;
    private javax.swing.JLabel txtName10;
    private javax.swing.JLabel txtName3;
    private javax.swing.JLabel txtName4;
    private javax.swing.JLabel txtName6;
    private textfield.TextField txtPhone;
    // End of variables declaration//GEN-END:variables
    private void initData() {
        initCardData();
//        initNoticeBoard();
        initTableData();
    }

    private void initTableData() {
//        EventAction eventAction = new EventAction() {
//            @Override
//            public void delete(ModelStudent student) {
//                if (showMessage("Delete Student : " + student.getName())) {
//                    System.out.println("User click OK");
//                } else {
//                    System.out.println("User click Cancel");
//                }
//            }
//
//            @Override
//            public void update(ModelStudent student) {
////                if (showMessage("Update Student : " + student.getName())) {
////                    System.out.println("User click OK");
////                } else {
////                    System.out.println("User click Cancel");
////                }
//            }
//        };
        for (int i = 0; i < list.size(); i++) {
            tblNhanVien.addRow(new KhachHang(list.get(i).getMaKH(), list.get(i).getTen(), list.get(i).getSdt(), list.get(i).getEmail()).toTableRow());
        }

//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile.jpg")), "Jonh", "Male", "Java", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile1.jpg")), "Dara", "Male", "C++", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C#", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C#", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C#", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C#", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C#", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C#", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C#", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C#", 300).toRowTable(eventAction));
//        table1.addRow(new ModelStudent(new ImageIcon(getClass().getResource("/com/raven/icon/profile2.jpg")), "Bora", "Male", "C#", 300).toRowTable(eventAction));
    }

    private void initCardData() {
//        Icon icon1 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.PEOPLE, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
//        card1.setData(new ModelCard("New Student", 5100, 20, icon1));
//        Icon icon2 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.MONETIZATION_ON, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
//        card2.setData(new ModelCard("Income", 2000, 60, icon2));
//        Icon icon3 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.SHOPPING_BASKET, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
//        card3.setData(new ModelCard("Expense", 3000, 80, icon3));
//        Icon icon4 = IconFontSwing.buildIcon(GoogleMaterialDesignIcons.BUSINESS_CENTER, 60, new Color(255, 255, 255, 100), new Color(255, 255, 255, 15));
//        card4.setData(new ModelCard("Other Income", 550, 95, icon4));
    }

    private boolean showMessage(String message) {
        Message obj = new Message(Main.getFrames()[0], true);
        obj.showMessage(message);
        return obj.isOk();
    }

    private boolean ValidateInsert(int x) {
        if (txtID.getText().trim().equals("") || txtID.getText().trim().length() != 5) {
            txtID.requestFocus();
            notification(fr, "ID invalid !", false);
            return false;
        }
        if (x == 0) {
            for (int i = 0; i < list.size(); i++) {
                if (txtID.getText().trim().equals(list.get(i).getMaKH())) {
                    txtID.requestFocus();
                    notification(fr, "ID invalid !", false);
                    return false;
                }
            }
        }
        if (txtName.getText().trim().equals("")) {
            txtName.requestFocus();
            notification(fr, "Fullname invalid !", false);
            return false;
        }
        if (txtEmail.getText().trim().equals("")) {
            txtEmail.requestFocus();
            notification(fr, "Email invalid !", false);
            return false;
        }
        String mauEmail = "\\w+@\\w+(\\.\\w+){1,2}";
        if (!(txtEmail.getText().trim().matches(mauEmail))) {
            txtEmail.requestFocus();
            notification(fr, "Email invalid !", false);
            return false;
        }
        try {
//            Date date = new SimpleDateFormat("yyyy-MM-dd").parse(txtBirthday.getText());
//            txtBirthday.setText(new SimpleDateFormat("yyyy-MM-dd").format(date));
        } catch (Exception e) {
//            txtBirthday.requestFocus();
            notification(fr, "Birthday invalid !", false);
            return false;
        }
        if (txtPhone.getText().trim().equals("")) {
            txtPhone.requestFocus();
            notification(fr, "Phone invalid !", false);
            return false;
        }
        if (!txtPhone.getText().matches("\\d{9,10}")) {
            txtPhone.requestFocus();
            notification(fr, "Phone invalid !", false);
            return false;
        }
        return true;
    }

    public boolean ValidateUpdate() {
        if (ValidateInsert(1)) {
            return true;
        }
        return false;
    }

    public void reform() {
        txtID.setText("");
        txtFullname.setText("");
        txtEmail.setText("");
//        txtBirthday.setText("");
        txtPhone.setText("");
//        txtPassword.setText("");
//        lblRender.setText("Female");
//        lblRole.setText("Employee");
//        swbtnGender.setSelected(false);
//        swbtnRole.setSelected(false);
        txtID.setEditable(true);
        btnAdd.setText("ADD");
//        btnDelete.setEnabled(false);
    }

//    public void selectAll() {
//        Date date = new Date();
//        int day = date.getYear() + 1900;
//        DefaultTableModel modelTable = (DefaultTableModel) tblNhanVien.getModel();
//        modelTable.setRowCount(0);
//        tblNhanVien.revalidate();
//        for (int i = 0; i < list.size(); i++) {
//            tblNhanVien.addRow(new ModelStaff(list.get(i).getMaNV(), list.get(i).getHoten(), list.get(i).getGioiTinh() ? "Male" : "Female", (day - Integer.parseInt(list.get(i).getNgaySinh().substring(0, 4))), list.get(i).getEmail(), list.get(i).getSdt(), list.get(i).getMatKhau(), list.get(i).getVaiTro() ? "Admin" : "Employee").toTableRow());
//        }
//    }
//
//    public void selectHave() {
//        List<NhanVien> haveList = dao.selectHave();
//        Date date = new Date();
//        int day = date.getYear() + 1900;
//        DefaultTableModel modelTable = (DefaultTableModel) tblNhanVien.getModel();
//        modelTable.setRowCount(0);
//        tblNhanVien.revalidate();
//        for (int i = 0; i < haveList.size(); i++) {
//            tblNhanVien.addRow(new ModelStaff(haveList.get(i).getMaNV(), haveList.get(i).getHoten(), haveList.get(i).getGioiTinh() ? "Male" : "Female", (day - Integer.parseInt(haveList.get(i).getNgaySinh().substring(0, 4))), haveList.get(i).getEmail(), haveList.get(i).getSdt(), haveList.get(i).getMatKhau(), haveList.get(i).getVaiTro() ? "Admin" : "Employee").toTableRow());
//        }
//    }
//
//    public void selectYet() {
//        List<NhanVien> yetList = dao.selectYet();
//        Date date = new Date();
//        int day = date.getYear() + 1900;
//        DefaultTableModel modelTable = (DefaultTableModel) tblNhanVien.getModel();
//        modelTable.setRowCount(0);
//        tblNhanVien.revalidate();
//        for (int i = 0; i < yetList.size(); i++) {
//            tblNhanVien.addRow(new ModelStaff(yetList.get(i).getMaNV(), yetList.get(i).getHoten(), yetList.get(i).getGioiTinh() ? "Male" : "Female", (day - Integer.parseInt(yetList.get(i).getNgaySinh().substring(0, 4))), yetList.get(i).getEmail(), yetList.get(i).getSdt(), yetList.get(i).getMatKhau(), yetList.get(i).getVaiTro() ? "Admin" : "Employee").toTableRow());
//        }
//    }

    public void notification(Frame frame, String text, boolean x) {
        if (!x) {
            Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, text);
            panel.showNotification();
        } else {
            Notification panel = new Notification(frame, Notification.Type.SUCCESS, Notification.Location.TOP_CENTER, text);
            panel.showNotification();
        }

    }
}
